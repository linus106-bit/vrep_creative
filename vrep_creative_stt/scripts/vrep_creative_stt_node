#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import division
import rospy
import os, glob
import csv
import rospkg

from std_msgs.msg import Float32MultiArray



import re
import sys

from google.cloud import speech

import pyaudio
from six.moves import queue
rospack = rospkg.RosPack()
RATE = 16000
CHUNK = int(RATE / 10)  # 100ms

T = 15.0
t = 5.0
cup = 200.0
soy = 1.236
salt = 2.16
gochujang = 1.220

class MicrophoneStream(object):

    def __init__(self, rate, chunk):
        self._rate = rate
        self._chunk = chunk
        self._buff = queue.Queue()
        self.closed = True

    def __enter__(self):
        self._audio_interface = pyaudio.PyAudio()
        self._audio_stream = self._audio_interface.open(
            format=pyaudio.paInt16,
            channels=1,
            rate=self._rate,
            input=True,
            frames_per_buffer=self._chunk,
            stream_callback=self._fill_buffer,
        )

        self.closed = False

        return self

    def __exit__(self, type, value, traceback):
        self._audio_stream.stop_stream()
        self._audio_stream.close()
        self.closed = True
        self._buff.put(None)
        self._audio_interface.terminate()

    def _fill_buffer(self, in_data, frame_count, time_info, status_flags):
        self._buff.put(in_data)
        return None, pyaudio.paContinue

    def generator(self):
        while not self.closed:
            chunk = self._buff.get()
            if chunk is None:
                return
            data = [chunk]

            while True:
                try:
                    chunk = self._buff.get(block=False)
                    if chunk is None:
                        return
                    data.append(chunk)
                except queue.Empty:
                    break

            yield b"".join(data)

def listen_print_loop(responses):
    automation = False
    num_chars_printed = 0
    for response in responses:
        if not response.results:
            continue

        result = response.results[0]
        if not result.alternatives:
            continue

        transcript = result.alternatives[0].transcript

        overwrite_chars = " " * (num_chars_printed - len(transcript))

        if result.is_final:
            if transcript[0] ==' ':
                transcript = transcript[1:]

            a = transcript.split(' ')
            print(transcript)

            if len(a) == 7:
                sauce = a[0]
                amount = a[1]+a[2]
                location = a[3]+' '+a[4][:-1]
            elif len(a) == 6:
                sauce = a[0]
                amount = a[1]
                location = a[2]+' '+a[3][:-1]
            elif len(a) == 3:
                automation = True
                sauce = a[0]
            else:
                pass
           
            if automation:
                print("소스의 종류 :", sauce)
                print("소스 양 : 자율모드")
                print("화구 위치 : 자율모드",'\n')
                if sauce == "간장":
                    saucepos = 1
                elif sauce == "소금":
                    saucepos = 2
                elif sauce == "고추장":
                    saucepos = 3
                else:
                    saucepos = 1
                stt_data = [saucepos, int(rospy.get_param('stop_free')), 0]
                stt_list = Float32MultiArray(data=stt_data)
                stt_cmd.publish(stt_list)
                print("ok")
            else:
                print("소스의 종류 :", sauce)
                print("소스 양 :", amount)
                print("화구 위치 :", location,'\n')

                V = amount[-2:]
                location = float(location[0])
                

                if V == "그램":
                    weight = float(amount[:-2])
                    if sauce == "간장":
                        saucepos = 1
                    elif sauce == "소금":
                        saucepos = 2
                    elif sauce == "고추장":
                        saucepos = 3
                    else:
                        saucepos = 1
                elif V == "큰술":
                    amount = amount[:-2]
                    volume = vol(amount, T)
                    weight, saucepos = weightmeasure(sauce, volume)
                elif V == "은술":
                    amount = amount[:-2]
                    volume = vol(amount, t)
                    weight, saucepos = weightmeasure(sauce, volume) 
                elif V == "ml":
                    amount = amount[:-2]
                    volume = vol(amount, 1)
                    weight, saucepos = weightmeasure(sauce, volume)
                else: # 컵
                    amount = amount[:-1]
                    volume = vol(amount, cup)
                    weight, saucepos = weightmeasure(sauce, volume)
                stt_data = [saucepos, weight, location]
                stt_list = Float32MultiArray(data=stt_data)
                stt_cmd.publish(stt_list)

def main():
    language_code = "ko-KR"  # a BCP-47 language tag

    client = speech.SpeechClient()
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
        sample_rate_hertz=RATE,
        language_code=language_code,
    )

    streaming_config = speech.StreamingRecognitionConfig(
        config=config, interim_results=True
    )

    with MicrophoneStream(RATE, CHUNK) as stream:
        audio_generator = stream.generator()
        requests = (
            speech.StreamingRecognizeRequest(audio_content=content)
            for content in audio_generator
        )

        responses = client.streaming_recognize(streaming_config, requests)

        listen_print_loop(responses)

def weightmeasure(sauce, volume):
    if sauce == "간장":
        weight = soyweight(volume)
        saucepos = 1.0
    elif sauce == "소금":
        weight = saltweight(volume)
        saucepos = 2.0
    elif sauce == "고추장":
        weight = gochujangweight(volume)
        saucepos = 3.0
    else:
        weight = 15.0
        saucepos = 1.0
    
    return weight, saucepos

def vol(amount, U):
    if amount == "한":
        amount = U
    elif amount == "두":
        amount = 2*U
    elif amount == "세":
        amount = 3*U
    elif amount == "네":
        amount = 4*U
    elif amount == "다섯":
        amount = 5*U
    elif amount == "여섯":
        amount = 6*U
    else:
        amount = 3*U
    
    return amount

def soyweight(amount):
    return soy*amount

def saltweight(amount):
    return salt*amount

def gochujangweight(amount):
    return gochujang*amount


    
if __name__ == "__main__":
    rospy.init_node('sauce_stt')
    stt_cmd = rospy.Publisher('stt_cmd',Float32MultiArray,queue_size=1)
    main()
